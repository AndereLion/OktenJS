//
// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
// {
//     id: 1,
//         name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//     street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//         lat: '-37.3159',
//             lng: '81.1496'
//     }
// },
//     phone: '1-770-736-8031 x56442',
//         website: 'hildegard.org',
//     company: {
//     name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
// }
// }
class SUser {
    constructor(id, name, username, email, street, suite, city, zipcode, lat, lng) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.adress = {
            street: street,
            suite: suite,
            city: city,
            zipcode: zipcode,
            geo: {
                lat: lat,
                lng: lng,
            }
        };
    }
}

class SFirm {
    constructor(phone, website, name, catchPhrase, bs) {
        this.phone = phone;
        this.website = website;
        this.company = {
            name: name,
            catchPhrase: catchPhrase,
            bs: bs,
        }
    }
}

sUser = new SUser(1, 'Leanne Graham', 'Bret', 'Sincere@april.biz', 'Kulas Light',
    'Apt. 556', 'Gwenborough', '92998-3874', '-37.3159', '81.1496');
console.log(sUser);
sFirm = new SFirm('1-770-736-8031 x56442', 'hildegard.org', 'Romaguera-Crona',
    'Multi-layered client-server neural-net', 'harness real-time e-markets');
console.log(sFirm);

// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//  -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
class TegInfo {
    constructor(titleOfTag, action, titleOfAttr1, actionOfAttr1, titleOfAttr2, actionOfAttr2,) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attrs = [{
            titleOfAttr1: titleOfAttr1,
            actionOfAttr1: actionOfAttr1,
        }, {
            titleOfAttr2: titleOfAttr2,
            actionOfAttr2: actionOfAttr2,
        }
        ];
    }
}

aTeg = new TegInfo('a',
    'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.' +
    ' В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь.' +
    ' Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки.' +
    ' При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
    'accesskey', 'Активация ссылки с помощью комбинации клавиш', 'href', 'Задает адрес документа, на который следует перейти.');
console.log(aTeg);
divTeg = new TegInfo('a',
    'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
    'align', 'Задает выравнивание содержимого тега <div>.', 'title', 'Добавляет всплывающую подсказку к содержимому',);
console.log(divTeg);
h1Teg = new TegInfo('a',
    'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.' +
    ' В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь.' +
    ' Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки.' +
    ' При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
    'accesskey', 'Активация ссылки с помощью комбинации клавиш', 'href', 'Задает адрес документа, на который следует перейти.');
console.log(h1Teg);
spanTeg = new TegInfo('a',
    'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
    'accesskey', 'Активация ссылки с помощью комбинации клавиш', 'href', 'Задает адрес документа, на который следует перейти.');
console.log(spanTeg);
inputTeg = new TegInfo('a',
    'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.',
    'type', 'Сообщает браузеру, к какому типу относится элемент формы.', 'name', 'Имя поля, предназначено для того, чтобы обработчик формы мог его идентифицировать.');
console.log(inputTeg);
formTeg = new TegInfo('a',
    'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
    'target', 'Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.', 'action', 'Адрес программы или документа, который обрабатывает данные формы.');
console.log(formTeg);
optionTeg = new TegInfo('a',
    'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
    'disabled', 'Заблокировать для доступа элемент списка.', 'label', 'Указание метки пункта списка.');
console.log(optionTeg);
selectTeg = new TegInfo('a',
    'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
    'accesskey', 'Активация ссылки с помощью комбинации клавиш', 'disabled', 'Блокирует доступ и изменение элемента.');
console.log(selectTeg);

// інформацію брати з htmlbook.ru
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }
